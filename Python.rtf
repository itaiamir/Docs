{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 CourierNewPS-BoldMT;\f1\fmodern\fcharset0 CourierNewPSMT;\f2\fnil\fcharset0 Calibri;
\f3\fmodern\fcharset0 CourierNewPS-BoldItalicMT;\f4\fnil\fcharset0 CenturySchoolbook;}
{\colortbl;\red255\green255\blue255;\red155\green0\blue211;\red247\green150\blue70;\red192\green80\blue77;
\red0\green77\blue187;\red209\green99\blue73;\red255\green0\blue128;\red255\green192\blue0;\red0\green0\blue255;
}
{\*\expandedcolortbl;\csgray\c100000;\csgenericrgb\c60784\c0\c82745;\csgenericrgb\c96863\c58824\c27451;\csgenericrgb\c75294\c31373\c30196;
\csgenericrgb\c0\c30196\c73333;\csgenericrgb\c81961\c38824\c28627;\csgenericrgb\c100000\c0\c50196;\csgenericrgb\c100000\c75294\c0;\csgenericrgb\c0\c0\c100000;
}
\paperw11900\paperh16840\vieww51000\viewh28800\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf0 \ul \ulc0 PYTHON
\f1\b0 \ulnone \
\

\f2\b \cf2 \ul \ulc2 Argparse
\f1\b0 \cf0 \ulnone \
Handles argument from the console\
\

\f0\b \cf3 import argparse
\f1\b0 \cf0 \
\
parser = argparse.
\f0\b \cf4 ArgumentParser
\f1\b0 \cf0 ()\
parser = 
\f0\b \cf4 add_argument
\f1\b0 \cf0 ("
\f0\b num
\f1\b0 ",help="The Fibo Number",type=int)\
args = parser.
\f0\b \cf4 parse_args
\f1\b0 \cf0 ()\
\
result = fib(args.
\f0\b num
\f1\b0 )\
\

\f0\b \cf5 Optional Arguments
\f1\b0 :\cf0 \
parser.
\f0\b \cf4 add_argument
\f1\b0 \cf0 ("
\f0\b -o
\f1\b0 ","
\f0\b --output
\f1\b0 ",help="Output the result to a 				    file",action="store_true")\
\
if 
\f0\b args.\cf4 output
\f1\b0 \cf0 :\
	f = open("file.txt.", "a")\
	f.write(str(result))\
\
\

\f0\b \cf5 Mutually Exclusive Arguments
\f1\b0 :\cf0 \
When you can select only 1 option and not both\
\
group = parser.
\f0\b \cf4 add_mutually_execlusive_group()
\f1\b0 \cf0 \
group.
\f0\b \cf4 add_argument
\f1\b0 \cf0 ("-v","--verbose",action="store_true")\
group.
\f0\b \cf4 add_argument
\f1\b0 \cf0 ("-q","--quiet",action="store_true")\
\
\

\f2\b \cf2 \ul \ulc2 Math
\f1\b0 \cf0 \ulnone \
\

\f0\b \cf6 +
\f1\b0 \cf0 ,
\f0\b \cf6 -
\f1\b0 \cf0 ,
\f0\b \cf6 *
\f1\b0 \cf0 ,
\f0\b \cf6 /
\f1\b0 \cf0 \
18
\f0\b \cf6 /
\f1\b0 \cf0 7 = 2\
18.0
\f0\b \cf6 /
\f1\b0 \cf0 7 = 2.571428...\
\

\f3\i\b \cf5 Reminder
\f1\i0\b0 \cf0 \
9
\f0\b \cf4 %
\f1\b0 \cf0 4 = 1\
8.75
\f0\b \cf4 %
\f1\b0 \cf0 .5 = 0.25\
6
\f0\b \cf4 *
\f1\b0 \cf0 7 = 42\
\

\f3\i\b \cf5 Exponent
\f1\i0\b0 \cf0 \
8
\f0\b \cf4 **
\f1\b0 \cf0 3 = 512\
-5
\f0\b \cf4 **
\f1\b0 \cf0 4 = -625\
\

\f2\b \cf2 \ul \ulc2 Variables
\f1\b0 \cf0 \ulnone \
\

\f3\i\b \cf5 Assignment
\f1\i0\b0 \cf0 \
x
\f0\b \cf4 =
\f1\b0 \cf0 18\
will stay this value \
\

\f0\b g
\f1\b0  
\f0\b \cf4 = input
\f1\b0 \cf0 ("Enter number here: ")\
Enter number here: 43\
now 
\f0\b g
\f1\b0  
\f0\b \cf4 =
\f1\b0 \cf0  43\
\

\f0\b for strings
\f1\b0 \
name=
\f0\b \cf4 raw_input
\f1\b0 \cf0 ("Enter your name: ")\
\

\f0\b Variables with no value - none
\f1\b0 \
we can also assign nothing, or an empty value.\
myVal = 
\f0\b \cf4 None
\f1\b0 \cf0 \
\
\

\f2\b \cf2 \ul \ulc2 If Statement
\f1\b0 \cf0 \ulnone \
\

\f0\b indentation is IMPORTENT\
\cf4 if
\f1\b0 \cf0  tuna 
\f0\b \cf4 ==
\f1\b0 \cf0  "fish":\
	print 'this is a fish alright'\

\f0\b \cf4 elif
\f1\b0 \cf0  tuna 
\f0\b \cf4 ==
\f1\b0 \cf0  "salmon":\
	print 'this is a fish'\

\f0\b \cf4 else
\f1\b0 \cf0 :\
	print 'this is not a fish'\
\

\f3\i\b \cf5 nesting 
\f1\i0\b0 \cf0 \

\f0\b \cf4 if
\f1\b0 \cf0  thing 
\f0\b \cf4 ==
\f1\b0 \cf0  "1":\
	
\f0\b \cf4 if
\f1\b0 \cf0  thing 
\f0\b \cf4 ==
\f1\b0 \cf0 "2":\
\

\f2\b \cf2 \ul \ulc2 Comparison Operators
\f1\b0 \cf0 \ulnone \
\
9
\f0\b \cf4 <
\f1\b0 \cf0 7 9
\f0\b \cf4 <=
\f1\b0 \cf0 9 
\f0\b \cf4 !=
\f1\b0 \cf0  \
\

\f0\b \cf4 is
\f1\b0 \cf0  --> only if it the same object\
\

\f0\b \cf4 if
\f1\b0 \cf0  'p' 
\f0\b \cf4 in
\f1\b0 \cf0  pizza:\
	print 'It\\'s true'\
\

\f3\i\b \cf5 And & Or
\f1\i0\b0 \cf0 \
"dog" 
\f0\b \cf4 <
\f1\b0 \cf0  "cat" 
\f0\b \cf4 =
\f1\b0 \cf0  false  --> alpha numeric compare\
\
example 
\f0\b \cf4 =
\f1\b0 \cf0  5\

\f0\b \cf4 if
\f1\b0 \cf0  example 
\f0\b \cf4 <
\f1\b0 \cf0  3
\f0\b \cf4 :
\f1\b0 \cf0 \
	print "true"\
	\

\f0\b \cf4 if
\f1\b0 \cf0  example 
\f0\b \cf4 >
\f1\b0 \cf0  3 
\f0\b \cf4 and
\f1\b0 \cf0  example 
\f0\b \cf4 <
\f1\b0 \cf0  10
\f0\b \cf4 :
\f1\b0 \cf0 \
	print 'number is between 3 and 10'\
	\

\f0\b \cf4 if
\f1\b0 \cf0  example 
\f0\b \cf4 >
\f1\b0 \cf0  3 
\f0\b \cf4 or
\f1\b0 \cf0  example 
\f0\b \cf4 <
\f1\b0 \cf0  4
\f0\b \cf4 :
\f1\b0 \cf0 \
	print 'this works'\
\

\f2\b \cf2 \ul \ulc2 For & While
\f1\b0 \cf0 \ulnone \
		\
b = 1\

\f0\b \cf4 while 
\f1\b0 \cf0 b 
\f0\b \cf4 <=
\f1\b0 \cf0  10:\
	print b\
	b
\f0\b \cf4 +=
\f1\b0 \cf0 1\
\

\f3\i\b \cf5 Infinit Loop Break
\f1\i0\b0 \cf0 \

\f0\b \cf4 while 
\f1\b0 \cf0 1:\
	name = 
\f0\b \cf4 raw_input
\f1\b0 \cf0 ('Enter name: ')\
	if name 
\f0\b \cf4 ==
\f1\b0 \cf0  'quit': 
\f0\b \cf4 break
\f1\b0 \cf0 \
	\

\f0\b For loop
\f1\b0 	\
\
\
gl =['bread','milk','meat','beef']\

\f0\b \cf4 for 
\f1\b0 \cf0 food 
\f0\b \cf4 in 
\f1\b0 \cf0 gl:\
	print 'I want ' + food\
\
ages=\{'dad':42,'mom':48,'lisa':7\}\
\
print the keys -->\

\f0\b \cf4 for 
\f1\b0 \cf0 item 
\f0\b \cf4 in 
\f1\b0 \cf0 ages:\
	print item	\
\
print the values -->\

\f0\b \cf4 for 
\f1\b0 \cf0 item 
\f0\b \cf4 in 
\f1\b0 \cf0 ages:\
	print item, ages[item]\
\

\f0\b \cf4 Range
\f1\b0 \cf0 ()\

\f0\b \cf4 for 
\f1\b0 \cf0 i 
\f0\b \cf4 in range
\f1\b0 \cf0 (10):\
	print i          --> 0-9\
\
\

\f2\b \cf2 \ul \ulc2 Modules & Functions
\f1\b0 \cf0 \ulnone \
	\

\f0\b \cf4 pow
\f1\b0 \cf0 (5,4) - power the number = 625\

\f0\b \cf4 abs
\f1\b0 \cf0 (-18) = 18 - absolute\
\

\f0\b import a module:
\f1\b0  module.functionName\
\

\f0\b \cf4 import 
\f1\b0 \cf5 math\cf0 \
\cf5 math\cf0 .
\f0\b \cf4 floor
\f1\b0 \cf0 (18.7) = 18.0\
\cf5 math\cf0 .
\f0\b \cf4 sqrt
\f1\b0 \cf0 (81) = 9.0\
\

\f0\b you can assign a function to a variable !
\f1\b0 \
\
bucky = \cf5 math\cf0 .
\f0\b \cf4 sqrt 
\f1\b0 \cf0 \
bucky(81) = 9.0\
\

\f3\i\b \cf5 Functions
\f1\i0\b0 \cf0 \
\

\f0\b \cf4 def 
\f1\b0 \cf0 whatsup(x):\
	return 'whats up ' + x\
\
print whatsup('itai') --> whats up itai	\
\

\f0\b Default Paremeters
\f1\b0 \
\

\f0\b \cf4 def 
\f1\b0 \cf0 name(first
\f0\b \cf4 =
\f1\b0 \cf0 'tom',last
\f0\b \cf4 =
\f1\b0 \cf0 'smith'):\
	print '%s %s' % (first, last)\
\

\f0\b Multiple Parameters
\f1\b0 \
\
treat *food as a tuple\
\

\f0\b \cf4 def 
\f1\b0 \cf0 list(*food):\
	print food\
\

\f0\b \cf4 list
\f1\b0 \cf0 ('apples') -> ('apples',) \

\f0\b \cf4 list
\f1\b0 \cf0 ('apples','peaches','beef')) --> ('apples','peaches','beef')\
\

\f0\b \cf4 def 
\f1\b0 \cf0 profile(name,*ages):\
	
\f0\b \cf4 print 
\f1\b0 \cf0 name\
	
\f0\b \cf4 print 
\f1\b0 \cf0 ages\
	\
profile('bucky',42,43,76,54,98) -->\
\
bucky\
(42,43,76,54,98)	\
\

\f0\b Parameter Types
\f1\b0 \
\

\f0\b \cf4 def 
\f1\b0 \cf0 cart (**items):\
	
\f0\b \cf4 print 
\f1\b0 \cf0 items\
\
cart (apples=4,peaches=6,beef=60) -->\
\{'peaches': 6,'apples': 4,'beef': 60\}\
\

\f0\b \cf4 def 
\f1\b0 \cf0 profile(first,last,*ages,**items):\
	
\f0\b \cf4 print 
\f1\b0 \cf0 first, last\
	
\f0\b \cf4 print 
\f1\b0 \cf0 ages\
	
\f0\b \cf4 print 
\f1\b0 \cf0 items\
	\
profile('bucky','roberts',32,43,76,bacon=4,saus=64) -->\
bucky roberts\
(32,43,76)\
\{'saus': 64, 'bacon': 4\}\
\
\

\f3\i\b \cf5 Modules
\f1\i0\b0 \cf0 \
Modules are used to group functions,variables and other things.\
\
for example : the 
\f0\b \cf4 time 
\f1\b0 \cf0 module\

\f0\b \cf4 import time
\f1\b0 \cf0 \
print(
\f0\b \cf4 time.asctime()
\f1\b0 \cf0 ) -> will return the current date and time.\
\
the 
\f0\b \cf4 sys 
\f1\b0 \cf0 module (system)\

\f0\b \cf4 import sys
\f1\b0 \cf0 \
print(
\f0\b \cf4 sys.stdin.readline()
\f1\b0 \cf0 ) -> will read line from the user.\
\
\

\f2\b \cf2 \ul \ulc2 Built-in Functions
\f1\b0 \cf0 \ulnone \
\

\f3\i\b abs
\f1\i0\b0 \
Absolute value of a number:\

\f0\b \cf4 abs
\f1\b0 \cf0 (10) = 10\

\f0\b \cf4 abs
\f1\b0 \cf0 (-10) = 10\
\

\f3\i\b bool
\f1\i0\b0 \
0 will return False any other will return True:\

\f0\b \cf4 bool
\f1\b0 \cf0 (0) = False\

\f0\b \cf4 bool
\f1\b0 \cf0 (1) = True\

\f0\b \cf4 bool
\f1\b0 \cf0 (None) = False\

\f0\b \cf4 bool
\f1\b0 \cf0 ('a') = True\
\

\f2 The 
\b \cf4 bool 
\b0 \cf0 function will also return 
\b False 
\b0 for lists, tuples, and\
maps that do not contain any values.\

\f1 \
myList=[]\

\f0\b \cf4 bool
\f1\b0 \cf0 (myList) = False\
\

\f0\b rstrip
\f1\b0 \
Removes any spaces and Enter characters from string.\
year = 
\f0\b \cf4 input
\f1\b0 \cf0 ("Year of birth: ')\
if not 
\f0\b \cf4 bool 
\f1\b0 \cf0 (year.
\f0\b \cf4 rstrip
\f1\b0 \cf0 ()):\
	print('you need to enter a value')\
\

\f0\b eval
\f1\b0 \
Takes a string and runs it as an expression\

\f0\b \cf4 eval
\f1\b0 \cf0 ('10*5') = 50\
\

\f0\b exec
\f1\b0 \
exec can run more complicate programs than eval\
and it does not return a value\
my_small_program = ''' print('ham')\
print ('sandwich')'''\

\f0\b \cf4 exec
\f1\b0 \cf0 (my_small_program) -> \
ham \
sandwich\
\

\f0\b float
\f1\b0 \
Converts a string or number to float\

\f0\b \cf4 float
\f1\b0 \cf0 ('12') = 12.0\
\

\f0\b int
\f1\b0 \
Converts a string or number into int\

\f0\b \cf4 int
\f1\b0 \cf0 ('123.456') = ERROR can't convert float\

\f0\b \cf4 int
\f1\b0 \cf0 (123.456) = 123\

\f0\b \cf4 int
\f1\b0 \cf0 ('123') = 123\
\

\f0\b len
\f1\b0 \
Returns the length of an object or a string\

\f0\b \cf4 len
\f1\b0 \cf0 ('this is a test string') = 21\
myList = ['one','two','three']\

\f0\b \cf4 len
\f1\b0 \cf0 (myList) = 3 (elements)\
very usefull in loops:\

\f0\b \cf4 for 
\f1\b0 \cf0 x 
\f0\b \cf4 in range
\f1\b0 \cf0 (0, 
\f0\b \cf4 len
\f1\b0 \cf0 (fruit)):\
\

\f0\b max & min
\f1\b0 \
max returns the largest item in a list,tuple or string\
numbers = [5, 4, 10, 30, 22]\

\f0\b \cf4 max
\f1\b0 \cf0 (numbers) = 30\

\f0\b \cf4 min
\f1\b0 \cf0 (numbers) = 4\
\

\f0\b range
\f1\b0 \

\f0\b \cf4 range 
\f1\b0 \cf0 (start ,stop ,step)\

\f0\b \cf4 list
\f1\b0 \cf0 (
\f0\b \cf4 range
\f1\b0 \cf0 (0,5)) = [0, 1, 2, 3, 4, 5]\
count_by_two = 
\f0\b \cf4 list
\f1\b0 \cf0 (
\f0\b \cf4 range
\f1\b0 \cf0 (0,30,2)) =\
[0, 2, 4, 6, 8, .... 28] \
count_down_by_two = 
\f0\b \cf4 list
\f1\b0 \cf0 (
\f0\b \cf4 range
\f1\b0 \cf0 (30, 10, -2)) = \
[28, 26, 24, 22, ...12]\
\

\f0\b sum
\f1\b0 \
Adds items in a list and return the total\
my_list_of_numbers = list(range(0, 500, 50))\

\f0\b \cf4 sum 
\f1\b0 \cf0 (my_list_of_numbers) = 2250\
\

\f2\b \cf2 \ul \ulc2 Strings
\f1\b0 \cf0 \ulnone \
\

\f0\b \cf4 ""
\f1\b0 \cf0  or 
\f0\b \cf4 ''
\f1\b0 \cf0  same!\
he's a jerk --> "he's a jerk" --> 'he
\f0\b \cf4 \\
\f1\b0 \cf0 's a jerk'\
x = "itai"\
y = "amir"\
x+y = "itaiamir"\
\

\f0\b multiline string
\f1\b0 \
in order to create multiline string we use : 
\f0\b \cf4 '''
\f1\b0 \cf0 \
\
var1 = 
\f0\b \cf4 '''
\f1\b0 \cf0 this is the first line\
this is the second one
\f0\b \cf4 '''
\f1\b0 \cf0 \
\
the ''' will solve the problem with words like:\
shouldn't can't and even quotes "I am" \
\

\f0\b convert to string
\f1\b0  : 
\f0\b \cf4 str
\f1\b0 \cf0 (18)\
or\
num = 32 number --> 
\f0\b \cf4 `
\f1\b0 \cf0 num
\f0\b \cf4 `
\f1\b0 \cf0  = "32"\
or\

\f0\b \cf4 repr
\f1\b0 \cf0 () \
\

\f0\b convert to int :
\f1\b0  
\f0\b \cf4 int
\f1\b0 \cf0 ('20')\

\f0\b convert to float :
\f1\b0  
\f0\b \cf4 float
\f1\b0 \cf0 ('20.5')\
\
\

\f0\b Format A String
\f1\b0 \
\
bucky = "Hey there 
\f0\b \cf4 %s
\f1\b0 \cf0 ,hows your 
\f0\b \cf4 %s
\f1\b0 \cf0 "\
varb = ('betty','foot')\

\f0\b \cf4 print 
\f1\b0 \cf0 bucky 
\f0\b \cf4 %
\f1\b0 \cf0  varb\
"Hey there betty, hows your foot"\
\
Or we don't need to use a variable\

\f0\b \cf4 print
\f1\b0 \cf0 ("Hi there, 
\f0\b \cf4 %s
\f1\b0 \cf0  
\f0\b \cf4 %s
\f1\b0 \cf0 !" 
\f0\b \cf4 %
\f1\b0 \cf0  ('itai','amir'))\
"Hi there, itai Amir!"\
\

\f0\b return the starting position of the searched item
\f1\b0 \
example = "Hey now itai"\
example.
\f0\b \cf4 find
\f1\b0 \cf0 ('itai') = 8\
\
sequence=['hey','there','bessie','hoss']\
glue='hoss'\
glue.
\f0\b \cf4 join
\f1\b0 \cf0 (sequence) = 'heyhosstherehossbessiehosshoss'\
\
randstr = "I wish i Had NO"\
randstr.
\f0\b \cf4 lower() 
\f1\b0 \cf0 = 'i wish i had no'\
\
truth="I love old women"\
truth.
\f0\b \cf4 replace
\f1\b0 \cf0 ('old','young') = 'I love young women'\
\

\f0\b counting words in string using split
\f1\b0 \

\f0\b \cf4 len
\f1\b0 \cf0 (my_string.
\f0\b \cf4 split
\f1\b0 \cf0 (' '))\
\

\f2\b \cf2 \ul \ulc2 Templates
\f1\b0 \cf0 \ulnone \
Allows for data to change without having to edit the application.\
\

\f0\b \cf3 from string import Template
\f1\b0 \cf0 \
\
cart=[]\
cart.
\f0\b \cf4 append
\f1\b0 \cf0 (
\f0\b \cf3 dict
\f1\b0 \cf0 (item="Coke",price=5, qty=3))\
\
t = 
\f0\b \cf4 Template 
\f1\b0 \cf0 ("
\f0\b $
\f1\b0 qty x 
\f0\b $
\f1\b0 item = 
\f0\b $
\f1\b0 price")\
total = 0\
\
for data in cart:\
	print t.
\f0\b \cf4 substitute
\f1\b0 \cf0 (data)\
	total += data["price"]\
\
\

\f2\b \cf2 \ul \ulc2 Dictionary or Map
\f1\b0 \cf0 \ulnone \

\f2\b \cf1 \
you can\'92t join maps with the plus operator(+).
\f1\b0 \cf0 \
\

\f0\b Define Dictionary
\f1\b0 \
book=
\f0\b \cf4 \{
\f1\b0 \cf0 'dad':'bob','mom':'Lisa','Bro':'Joe'
\f0\b \cf4 \}
\f1\b0 \cf0 \
\

\f0\b Access Dictionary
\f1\b0 \
book['dad'] = 'bob'\
\

\f0\b Replace A Value In Dictionary
\f1\b0 \
ages = 
\f0\b \cf4 \{
\f1\b0 \cf0 'dad':'42','mom':'87'
\f0\b \cf4 \}
\f1\b0 \cf0 \
ages['dad'] = '36'\
\

\f0\b Delete A Value From Dictionary
\f1\b0 \

\f0\b \cf4 del 
\f1\b0 \cf0 ages['dad']\
\
book.
\f0\b \cf4 clear
\f1\b0 \cf0 () --> empty the dictionary\
\
tuna=ages.
\f0\b \cf4 copy
\f1\b0 \cf0 () --> will copy ages to tuna\
\
tuna.
\f0\b \cf4 has_key
\f1\b0 \cf0 ('mom') = true \
\

\f2\b \cf2 \ul \ulc2 Sequences & Lists
\f1\b0 \cf0 \ulnone \
\
family = ['mom','dad','bro','sis','dog']\
family[3] = 'sis'\
family[-2] = 'sis'\
\

\f0\b strings are also an array
\f1\b0 \
\
'bucky'[3] = 'k'\
\

\f0\b Adding items to a list
\f1\b0 \
myList.
\f0\b \cf4 append
\f1\b0 \cf0 ('bear')\
\

\f0\b Removing items from a list
\f1\b0 \

\f0\b \cf4 del 
\f1\b0 \cf0 myList[3]\

\f0\b \cf4 del 
\f1\b0 \cf0 numbers
\f0\b \cf4 [3]
\f1\b0 \cf0  = deletes the forth number from the list\
\

\f0\b List arithmetic
\f1\b0 \
we can join lists by adding them 
\f0\b \cf4 +
\f1\b0 \cf0 \
list1 = [1,2]\
list2 = ['Itai','Amir']\
print( list1 
\f0\b \cf4 +
\f1\b0 \cf0  list2 )\
[1,2,'Itai','Amir']\
\
we even can 
\f0\b multiply a list
\f1\b0 \
print (list1 
\f0\b \cf4 *
\f1\b0 \cf0  3)\
[1,2,1,2,1,2]\
\

\f0\b List Functions
\f1\b0 \
numbers = [8,1,4,17,28,165,7]\
\

\f0\b \cf4 len
\f1\b0 \cf0 (numbers) = 7 (elements)\

\f0\b \cf4 max
\f1\b0 \cf0 (numbers) = 165 the biggest number in the list\

\f0\b \cf4 min
\f1\b0 \cf0 (numbers) = 1 the lowest number in the list\

\f0\b \cf4 list
\f1\b0 \cf0 ('itai') = ['i','t','a','i']\

\f0\b \cf4 list
\f1\b0 \cf0 (
\f0\b \cf4 range
\f1\b0 \cf0 (0,100)) = [0,1,2,3,4,5,6...,100]\
\
numbers
\f0\b \cf4 [3]
\f1\b0 \cf0  = 77 will change the forth number in the list\
\

\f2\b \cf2 \ul \ulc2 Slicing (substring)
\f1\b0 \cf0 \ulnone \
\
example = [0,1,2,3,4,5,6,7,8,9]\
example
\f0\b \cf4 [4:8]
\f1\b0 \cf0  = 4,5,6,7\
\

\f0\b backwards
\f1\b0 :\
\
example
\f0\b \cf4 [-5:-1]
\f1\b0 \cf0  = 5,6,7,8  !! THE 9 IS MISSING\
example
\f0\b \cf4 [-5:]
\f1\b0 \cf0  = 5,6,7,8,9 continue until the last item\
example
\f0\b \cf4 [:7]
\f1\b0 \cf0  = 0,1,2,3,4,5,6\
\
example
\f0\b \cf4 [:]
\f1\b0 \cf0  = gets the entire list\
\

\f0\b staring,ending,how many to skip
\f1\b0 \
\
example
\f0\b \cf4 [1:8:2]
\f1\b0 \cf0  = 1,3,5,7\
\
example
\f0\b \cf4 [10:0:-2]
\f1\b0 \cf0  = 9,7,5,3,1\
\
example
\f0\b \cf4 [::-2]
\f1\b0 \cf0  = 9,7,5,3,1 Same !\
\
\

\f0\b Slicing Lists
\f1\b0 \
\
example = list('easyhoss')\
example
\f0\b \cf4 [4:]=
\f1\b0 \cf0 list('baby')\
['e','a','s','y','b','a','b','y']\
\

\f0\b NO NEED FOR SAME AMOUNT
\f1\b0 \
\
example = [7,8,9]\
example
\f0\b \cf4 [1:1]
\f1\b0 \cf0  = [3,3,3]\
[7,3,3,3,8,9]\
\
example
\f0\b \cf4 [1:5]
\f1\b0 \cf0  =
\f0\b \cf4 []
\f1\b0 \cf0  --> to delete elements in a list using slicing\
[7,9]\
\

\f0\b Editing Sequences
\f1\b0 \
\
[7,4,5] 
\f0\b \cf4 +
\f1\b0 \cf0  [4,6,5] 
\f0\b \cf4 =
\f1\b0 \cf0  [7,4,5,4,6,5]\
'bucky'
\f0\b \cf4 *
\f1\b0 \cf0 10 repeat it 10 times\
'buckybuckybucky.....'\
[21]
\f0\b \cf4 *
\f1\b0 \cf0 10 = [21,21,21,21,21,21,21,21...]\
\

\f0\b like InStr
\f1\b0 \
name='roastbeef'\
'z' 
\f0\b \cf4 in
\f1\b0 \cf0  name = false \
'r' 
\f0\b \cf4 in
\f1\b0 \cf0  name = true \
\

\f0\b is element in a sequence
\f1\b0 \
\

\f2\b \cf2 \ul \ulc2 Methods
\f1\b0 \cf0 \ulnone \
\
face = [21,18,30]\
face.
\f0\b \cf4 append
\f1\b0 \cf0 (45) --> append an element at the end\
[21,18,30,45]\
\
apples=['i','love','apples','apples','now]\
apples.
\f0\b \cf4 count
\f1\b0 \cf0 ('apples') = 2\
apples.
\f0\b \cf4 count
\f1\b0 \cf0 ('bow') = 0\
\
one=[1,2,3]\
two=[4,5,6]\
\
one.
\f0\b \cf4 extend
\f1\b0 \cf0 (two) = [1,2,3,4,5,6]\
if I wrote :\
one.
\f0\b \cf4 append
\f1\b0 \cf0 (two) = [1,2,3,[4,5,6]] 
\f0\b AHAH
\f1\b0 \
\
say=['hey','now','brown','cow']\
say.
\f0\b \cf4 index
\f1\b0 \cf0 ('brown') = 2\
\
say.
\f0\b \cf4 insert
\f1\b0 \cf0 (2,'hoss') = say=['hey','now',,'hoss','brown','cow']\
x = say.
\f0\b \cf4 pop
\f1\b0 \cf0 (1) = ['hey','brown','cow'] returns the deleted item also\
x ='now'\
\
say.
\f0\b \cf4 remove
\f1\b0 \cf0 ('brown') = ['hey','now','cow']\
\
say.
\f0\b \cf4 reverse
\f1\b0 \cf0 () = ['cow','now','hey']\
\
new=[32,54,22,7,98,1]\
new.
\f0\b \cf4 sort
\f1\b0 \cf0 () = [1,7,22,32,54,98]\
sorted('Easyhoss') = ['E','a','h','o','s','s','s','y']\
\

\f2\b \cf2 \ul \ulc2 Tuples
\f1\b0 \cf0 \ulnone \
\
Like a list but it 
\f0\b can't be changed
\f1\b0 \
\
41,42,32,54  = (41,42,32,54)\
\

\f0\b WE CAN ONLY GET OUR VALUES CAN'T CHANGE IT
\f1\b0 \
\

\f0\b Tuples as Parameters
\f1\b0 \
\

\f0\b \cf4 def 
\f1\b0 \cf0 example(a,b,c):\
	return a+b*c\
	\
tuna=(5,7,3)\
\

\f0\b * - indicates you are working with a tuple\
** - indicates you are working with dictionary
\f1\b0 \
\
example(*tuna) --> 26\
\

\f0\b \cf4 def 
\f1\b0 \cf0 example2(**this):\
	print this\
bacon=\{'mom':32,'dad':54\}\
\
example2(**bacon) --> \{'dad':54, 'mom':32\}\
	\

\f2\b \cf2 \ul \ulc2 Object Oriented Program
\f1\b0 \cf0 \ulnone \
\

\f0\b Constructor 
\f1\b0 \
\

\f0\b \cf4 class 
\f1\b0 \cf0 new:\
	
\f0\b \cf4 def \cf0 __init__
\f1\b0 (self):\
		
\f0\b \cf4 print 
\f1\b0 \cf0 "this is a constructor"\
		
\f0\b \cf4 print 
\f1\b0 \cf0 "this will happen once we create the object"\
		\
newobj
\f0\b \cf4 =
\f1\b0 \cf0 new() -->\
this is a constructor\
this also print out\
\

\f0\b Class
\f1\b0 \
\

\f0\b \cf4 class 
\f1\b0 \cf0 Things:\
	
\f0\b \cf4 pass
\f1\b0 \cf0 \
\

\f0\b \cf4 pass 
\f1\b0 \cf0 is when we don't want to fill in the details at the moment.\
		\

\f0\b \cf3 self 
\f1\b0 \cf0 = the object itself\
\

\f0\b \cf4 class 
\f1\b0 \cf0 exampleClass:\
	eyes="blue"\
	age=22\
	
\f0\b \cf4 def 
\f1\b0 \cf0 thisMethod(
\f0\b \cf3 self
\f1\b0 \cf0 ):\
		return 'hey this method worked'\
		\
exampleObject=exampleClass()\
exampleObject.eyes --> 'blue'\
exampleObject.age --> 22\
exampleObject.thisMethod() --> 'hey this method worked'\
\

\f0\b \cf4 class 
\f1\b0 \cf0 className:\
	
\f0\b \cf4 def 
\f1\b0 \cf0 createName(
\f0\b \cf3 self
\f1\b0 \cf0 ,name):\
		
\f0\b \cf3 self
\f1\b0 \cf0 .name=name\
	
\f0\b \cf4 def 
\f1\b0 \cf0 displayName(
\f0\b \cf3 self
\f1\b0 \cf0 ):\
		return 
\f0\b \cf3 self
\f1\b0 \cf0 .name\
	
\f0\b \cf4 def 
\f1\b0 \cf0 saying(
\f0\b \cf3 self
\f1\b0 \cf0 ):\
		print "hello %s" % self.name\
		\
first=className()\
second=className()\
\
first.createName('itai')\
print first.displayName --> 'itai'\
		\

\f0\b Subclass and Superclasses - inhertance
\f1\b0 \
\

\f0\b \cf4 class 
\f1\b0 \cf0 parentClass:\
	var1="i am var1"\
	var2="i am var2"\
	\

\f0\b \cf4 class 
\f1\b0 \cf0 childClass(parentClass):\
	pass\
	\
parentObject=parentClass()\
parentObject.var1 --> 'i am var1'\
\
childObject=childClass()\
childObject.var1 --> 'i am var1'\
\

\f0\b Overwrite Variable Sub
\f1\b0 \
\

\f0\b \cf4 class 
\f1\b0 \cf0 parent:\
	var1="bacon"\
	var2="snuage"\
	\

\f0\b \cf4 class 
\f1\b0 \cf0 child(parent):\
	var2="toast"\
	\
pob=parent()\
cob=child()\
\
pob.var1 --> 'bacon'\
pob.var2 --> 'snuage'\
\
cob.var1 --> 'bacon'\
cob.var2 --> 'toast'\
\

\f0\b Multiple Parent Classes
\f1\b0 \
\

\f0\b \cf4 class 
\f1\b0 \cf0 Mom:\
	var1="hey im mom"\
	\

\f0\b \cf4 class 
\f1\b0 \cf0 Dad:\
	var2="hey there son i am dad"\
	\

\f0\b \cf4 class 
\f1\b0 \cf0 child(Mom,Dad):\
	var3='i am a new variable'\
	\
childObject = child()\
childObject.var1 --> 'hey i am mom'\
childObject.var2 --> 'hey there son i am dad'\
childObject.var3 --> 'i am a new variable'\
\

\f0\b Import Modules
\f1\b0 \
\

\f0\b \cf4 def 
\f1\b0 \cf0 testmod():\
	print 'this baby worked'\
	\
you need to save the module in the python directory\
the name --> swineflu.py\
\

\f0\b \cf4 import 
\f1\b0 \cf0 swineflu\
\
swineflu.testmod() --> this baby worked\
\

\f0\b YOU CAN IMPORT ONLY ONCE IN IDLE
\f1\b0 \
\

\f0\b Reload Modules
\f1\b0 \
\
baby =swineflu.testmod\
baby() --> this baby worked\
\

\f0\b \cf4 reload
\f1\b0 \cf0 (swineflu) --> this will reload the module if you changed it :)\
\

\f0\b Getting Module Info
\f1\b0 \

\f0\b \cf4 import 
\f1\b0 \cf0 math\
\

\f0\b \cf4 dir
\f1\b0 \cf0 (math) -->\
['__doc__', '__name__', '__package__', 'acos', 'acosh',\
 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign',\
 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1',\
 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']\
\

\f0\b \cf4 help
\f1\b0 \cf0 (math) --> better help on the moudle\
\
math
\f0\b \cf4 .__doc__
\f1\b0 \cf0  --> will give you a quick summary\
\

\f2\b \cf2 \ul \ulc2 Useful python modules
\f1\b0 \cf0 \ulnone \
\

\f0\b \cf5 import copy
\f1\b0 \cf0 \
Contains functions for creating copies of objects.\
harry=Animal('cat',4,'gray')\
harriet = 
\f0\b copy
\f1\b0 .
\f0\b \cf4 copy
\f1\b0 \cf0 (harry) ->change in harry will affect harriet\
harriet = 
\f0\b copy
\f1\b0 .
\f0\b \cf4 deepcopy
\f1\b0 \cf0 (harry) -> completly different objects\
now we have 2 same objects using copy\
\

\f0\b \cf5 import keyword
\f1\b0 \cf0 \

\f0\b keyword
\f1\b0 .
\f0\b \cf4 iskeyword
\f1\b0 \cf0 ('if') = True\

\f0\b keyword
\f1\b0 .
\f0\b \cf4 kwlist 
\f1\b0 \cf0 = Prints all keywords.\
\

\f0\b \cf5 import random
\f1\b0 \cf0 \
The randint picks a random number btw a range\

\f0\b random
\f1\b0 .
\f0\b \cf4 randint
\f1\b0 \cf0 (1,100) = 58\
\

\f0\b For picking random item from a list
\f1\b0 \
desserts = ['ice cream','pancackes','brownies']\

\f0\b random
\f1\b0 .
\f0\b \cf4 choice
\f1\b0 \cf0 (desserts) = brownies\
\
For shuffling items in a list\

\f0\b random
\f1\b0 .
\f0\b \cf4 shuffle
\f1\b0 \cf0 (desserts) = ['brownies','pancackes','ice cream'] \
\

\f0\b \cf5 import sys
\f1\b0 \cf0 \
The sys module contains system functions to control the shell.\
\

\f0\b sys
\f1\b0 .
\f0\b \cf4 exit
\f1\b0 \cf0 () = Will be stopping the shell\
v = 
\f0\b sys
\f1\b0 .
\f0\b \cf4 stdin
\f1\b0 \cf0 .
\f0\b \cf4 readline
\f1\b0 \cf0 () -> will read user input from the shell\
Or if you want specific num of characters\
v = 
\f0\b sys
\f1\b0 .
\f0\b \cf4 stdin
\f1\b0 \cf0 .
\f0\b \cf4 readline
\f1\b0 \cf0 (13) -> wil read 13 characters.\
\

\f0\b sys
\f1\b0 .
\f0\b \cf4 stdout
\f1\b0 \cf0 .
\f0\b \cf4 write
\f1\b0 \cf0 ("Hey!") -> will write to the shell\
when write finished it writes the numbers of characters at the end.\
\

\f0\b sys
\f1\b0 .
\f0\b \cf4 version 
\f1\b0 \cf0 -> pyhton version\
\

\f0\b \cf5 import time
\f1\b0 \cf0 \

\f0\b time
\f1\b0 .
\f0\b \cf4 time
\f1\b0 \cf0 () -> 1300139149.34\
returns the number of seconds from jan 1 1970 00am\
\

\f0\b to mesure time of a function:
\f1\b0 \
t1 = 
\f0\b time
\f1\b0 .
\f0\b \cf4 time
\f1\b0 \cf0 ()\
function\
t2 = 
\f0\b time
\f1\b0 .
\f0\b \cf4 time
\f1\b0 \cf0 ()\
print ('it took %s seconds' % (t2-t1))\
\

\f0\b to return the current date:
\f1\b0 \

\f0\b time
\f1\b0 .
\f0\b \cf4 asctime
\f1\b0 \cf0 () -> Mon Mar 11 22:03:41 2015\
\
we need a tuple to work with date:\
t = (2020,2,23,10,30,48,6,0,0)\
(year,month,days,hours,minutes,seconds,dayofweek,dayofyear,daylight saving)\
\

\f0\b time
\f1\b0 .
\f0\b \cf4 asctime
\f1\b0 \cf0 (t) -> Sun Feb 23 10:30:48 2020 \
\

\f0\b To return the current date and time as object:
\f1\b0 \
t = 
\f0\b time
\f1\b0 .
\f0\b \cf4 localtime
\f1\b0 \cf0 ()\
time.struct_time(tm_year=2020, tm_mon=2,tm_mday=23,\
			 tm_hour=22, tm_min=18, tm_sec=39,\
			 tm_wday=0, tm_yday=73, tm_isdst=0)\
year = t[0]\
month = t[1]\
\

\f0\b To slow or wait:
\f1\b0 \

\f0\b time
\f1\b0 .
\f0\b \cf4 sleep
\f1\b0 \cf0 (num_of_sec) - waits num_of_sec seconds\
\

\f0\b \cf5 import pickle
\f1\b0 \cf0 \
Used to convert objects into something that can be written into a file and then easily read back out.\
\

\f0\b \cf7 \ul \ulc7 Save Data
\f1\b0 \cf0 \ulnone \

\f3\i\b \cf3 game_data
\f1\i0\b0 \cf0  = \{'player-position' : 'N23 E45',\
		  'pockets' : ['keys','pocket knife',polished stone']\}\
save_file = open('save.dat', 'wb')\

\f0\b pickle
\f1\b0 .
\f0\b \cf4 dump
\f1\b0 \cf0 (
\f3\i\b \cf3 game_data
\f1\i0\b0 \cf0 , save file)\
save_file.close()\
\

\f0\b \cf7 \ul \ulc7 Load Data
\f1\b0 \cf0 \ulnone \
load_file = open('save.dat', 'rb')\
loaded_game_data = 
\f0\b pickle
\f1\b0 .
\f0\b \cf4 load
\f1\b0 \cf0 (load_file)\
load_file.close()\
\
\

\f2\b \cf2 \ul \ulc2 Working With Files
\f1\b0 \cf0 \ulnone \
\

\f0\b open a windows file
\f1\b0 \
test_file = open('c:\\\\users\\\\iamir\\\\test.txt')\
\

\f0\b open a linux file
\f1\b0 \
test_file = open('/home/jacob/test.txt')\
\

\f0\b write to file:
\f1\b0 \
fob=
\f0\b \cf4 open
\f1\b0 \cf0 ('c:/test/a.txt','
\f0\b \cf4 w
\f1\b0 \cf0 ') or '
\f0\b \cf4 r
\f1\b0 \cf0 '\
fob.
\f0\b \cf4 write
\f1\b0 \cf0 ('hey now i am in the file')\
fob.
\f0\b \cf4 close
\f1\b0 \cf0 ()\
\

\f0\b read from file:
\f1\b0 \
fob=
\f0\b \cf4 open
\f1\b0 \cf0 ('c:/test/a.txt,'r')\
fob.
\f0\b \cf4 read
\f1\b0 \cf0 (3) --> 3 bytes means 3 chars\
\
fob.
\f0\b \cf4 read
\f1\b0 \cf0 () --> reads the whole file.\
\

\f0\b reading line by line:
\f1\b0 \
fob=
\f0\b \cf4 open
\f1\b0 \cf0 ("c:/test/a.txt")\
fob.
\f0\b \cf4 readline
\f1\b0 \cf0 ()\
\
fob.
\f0\b \cf4 readlines
\f1\b0 \cf0 () --> enters the lines to a list\
\

\f0\b writing lines:
\f1\b0 \
fob.
\f0\b \cf4 write
\f1\b0 \cf0 ('this is  a new line\\n')\
\

\f0\b modifying lines:
\f1\b0 \
listme=fob.
\f0\b \cf4 readlines
\f1\b0 \cf0 ()\
fob.
\f0\b \cf4 close
\f1\b0 \cf0 \
listme[2] = 'changed line'\
fob.
\f0\b \cf4 writelines
\f1\b0 \cf0 (listme)\
\

\f2\b \cf2 \ul \ulc2 Regular Expressions
\f1\b0 \cf0 \ulnone \
\

\f0\b \cf3 import re
\f1\b0 \cf0 \
\
.    -> Matches any single character\
        ".at" would match cat, hat, rat\
[]   -> Matches a single character containes with the brackests\
 	   "[ch]at" would match cat,hat NOT rat\
[^ ] -> Matches a single character NOT contained within the 		   brackets "[^c]at" would match hat,rat but NOT cat\
^    -> Matches the expression if at the START of the string\
        "^.at" would match cat,hat,rat if located at the start of  \
        the string\
$    -> Same as above however at the END of a string\
	  ".at$" would match cat,hat,rat if located at the end of \
	   the string\
()   -> Contains sub expressions\
	   (Think BODMAS/BOMDAS)\
*    -> Matches the preceding element zero or more times\
	  "c.*" would match any word starting with c ,cat,coat,class\
\

\f0\b \cf4 match
\f1\b0 \cf0 ()  -> Checks to see if the expression matches the entire \
	       string\

\f0\b \cf4 search
\f1\b0 \cf0 () -> Checkes to see if there is a match somewhere in the \
	       string \
\
\
line = "I think of something"\
\
matchResult = re.match(r'think',line,re.M|re.I)\
if matchResult:\
	print("Match Found:" matchResult.group()\
\
searchResult = re.search(
\f0\b \cf4 r
\f1\b0 \cf0 'think',line,re.M|re.I)\
\

\f0\b \cf5 Option Flags
\f1\b0 \cf0 \
re.
\f0\b \cf4 I
\f1\b0 \cf0  -> Ignore case matching\
re.
\f0\b \cf4 M 
\f1\b0 \cf0 -> Makes $ match the end of a line and ^ the start of a line\
re.
\f0\b \cf4 S 
\f1\b0 \cf0 -> Makes .(dot) Match any character even the new line \
	   character\
re.
\f0\b \cf4 U 
\f1\b0 \cf0 -> Interpates in Unicode\
re.
\f0\b \cf4 X 
\f1\b0 \cf0 -> Ignores whitespace within the pattern\
\

\f0\b \cf5 Replace 
\f1\b0 \cf0 \
sub(pattern,repl,string,max=0)\
\

\f2\b \cf2 \ul \ulc2 MultiThreading
\f1\b0 \cf0 \ulnone \
\

\f0\b \cf3 from threading import Thread
\f1\b0 \cf0 \
\
def timer (name, delay, repeat):\
	print "Timer:" + name + " started"\
	while repeat > 0:\
		time.sleep(delay)\
		print name + ": " + str(time.ctime(time.time())\
		repeat-=1\
	print "Timer:" + name + " Completed"\
\
def Main():\
	t1 = 
\f0\b \cf4 Thread
\f1\b0 \cf0 (
\f0\b \cf2 target
\f1\b0 \cf0 =timer, 
\f0\b \cf2 args
\f1\b0 \cf0 =("Timer1",1,5))\
	t2 = 
\f0\b \cf4 Thread
\f1\b0 \cf0 (
\f0\b \cf2 target
\f1\b0 \cf0 =timer, 
\f0\b \cf2 args
\f1\b0 \cf0 =("Timer2",2,5))\
\
	t1.
\f0\b \cf4 start
\f1\b0 \cf0 ()\
	t2.
\f0\b \cf4 start
\f1\b0 \cf0 ()\
\

\f0\b Custom Thread
\f1\b0 \
\
class AsyncWrite(threading.Thread):\
	def __init__(self, text, out):\
		
\f0\b \cf4 threading.Thread
\f1\b0 \cf0 .__init__(self)\
		self.text = text\
		self.out = out\
\
	def run(self):\
		f = open(self.out,"a")\
		f.write(self.text + "\\n")\
		f.close()\
\
\
def Main()\
	message = raw_input("Enter a String to Store:")\
	background = AsyncWrite(message,"out.txt")\
	background.start()\
	\
	print ("The program can continue to run whule it write in \
		   another thread"\
	background.
\f0\b \cf4 join()
\f1\b0 \cf0  --> 
\f0\b waits for the thread to finish
\f1\b0 \
	print("Waited until thread was complete")\
\
if __name__ == '__main__':\
	Main()\
\

\f0\b Thread Lock
\f1\b0 \
\
tLock = threading.
\f0\b \cf4 Lock
\f1\b0 \cf0 ()\
\
tLock.
\f0\b \cf4 aquire
\f1\b0 \cf0 ()\
	Block Of CODE\
tLock.
\f0\b \cf4 release
\f1\b0 \cf0 ()\
\
\

\f2\b \cf2 \ul \ulc2 Networking
\f1\b0 \cf0 \ulnone \
\

\f0\b Socket Methods
\f1\b0 \
\
The constructor creates a new socket ->\

\f0\b \cf4 socket 
\f1\b0 \cf0 (
\f0\b socket_family
\f1\b0 , 
\f0\b socket_type
\f1\b0 )\
\
Bind takes a tuple of a host address and a port\

\f0\b \cf4 bind
\f1\b0 \cf0 ((
\f0\b hostname
\f1\b0 , 
\f0\b port
\f1\b0 ))\
\
Starts listening for TCP connections\

\f0\b \cf4 listen
\f1\b0 \cf0 ()\
\
Accepts a connection when found (returns a new socket)\

\f0\b \cf4 accept
\f1\b0 \cf0 ()\
\
Takes a tuple of the addtess and port\

\f0\b \cf4 connect
\f1\b0 \cf0 ((
\f0\b hostname
\f1\b0 ,
\f0\b port
\f1\b0 ))\
\
Tries to grab data from a TCP connection.\

\f0\b \cf4 recv
\f1\b0 \cf0 (
\f0\b buffer
\f1\b0 )\
\
attempts to send the bytes given to it\

\f0\b \cf4 send
\f1\b0 \cf0 (
\f0\b bytes
\f1\b0 )\
\
Closes a socket/connection and frees the port\

\f0\b \cf4 close
\f1\b0 \cf0 ()\
\

\f0\b Server Example
\f1\b0 \
\

\f0\b \cf3 import socket
\f1\b0 \cf0 \
\
def Main():\
	host = '127.0.0.1'\
	port = 5000\
	\
	s = socket.socket()\
	s.bind((host, port))\
\
	s.listen(1) - > 1 connection at a time\
	c, addr = s.accept()\
	print "Connection from : " + str(addr)\
\
	while True:\
		data = c.recv(1024)\
		if not data : -> if the client disconnect\
			break\
		print "from connected user: " + str(data)\
		data = str(data).uppser()\
		print "sending: " + str(data)\
		c.send(data)\
	c.close()\
\

\f0\b Client Example
\f1\b0 \
\

\f0\b \cf3 import socket 
\f1\b0 \cf0 \
\
def Main():\
	host = '127.0.0.1'\
	port = 5000\
	\
	s = socket.socket()\
	s.connect((host,port))\
	\
	message = raw_input("-> ")\
	while message != 'q':\
		s.send(message)\
		data = s.recv(1024)\
		print "Recieved from server : " + str(data)\
		message = raw_input("-> ")\
	s.close()\
\

\f0\b UDP Connections
\f1\b0 \
Udp uses recvfrom() and sendto()\
\

\f3\i\b server:
\f1\i0\b0 \
s = socket.socket(
\f0\b socket.AF_INET
\f1\b0 , 
\f0\b socket.SOCK_DGRAM
\f1\b0 )\
data, addr = s.
\f0\b \cf4 recvfrom
\f1\b0 \cf0 (1024)\
s.
\f0\b \cf4 sendto
\f1\b0 \cf0 (data, addr)\
\

\f3\i\b client:
\f1\i0\b0 \
s = socket.socket(
\f0\b socket.AF_INET
\f1\b0 , 
\f0\b socket.SOCK_DGRAM
\f1\b0 )\
s.
\f0\b \cf4 sendto
\f1\b0 \cf0 (message, server)\
data, addr = s.
\f0\b \cf4 recvfrom
\f1\b0 \cf0 (1024)\
\
\

\f2\b \cf2 \ul \ulc2 Database Interaction
\f1\b0 \cf0 \ulnone \
\

\f0\b Methods
\f1\b0 \
\
To connect to the DB\

\f0\b \cf4 connect
\f1\b0 \cf0 (info)\
\
Will get a cursor object ready to execute queries\

\f0\b \cf4 cursor
\f1\b0 \cf0 ()\
\
an SQL query\

\f0\b \cf4 execute
\f1\b0 \cf0 (sql)\
\
Return just 1 Row\

\f0\b \cf4 fetchone
\f1\b0 \cf0 ()\
\
Return a list of lists\

\f0\b \cf4 fetchall
\f1\b0 \cf0 ()\
\
Saves the changes on the DB\

\f0\b \cf4 commit
\f1\b0 \cf0 ()\
\
Rolls all temporary changes back\

\f0\b \cf4 rollback
\f1\b0 \cf0 ()\
\
Close the connection\

\f0\b \cf4 close
\f1\b0 \cf0 ()\
\
Execute a parameterized query\

\f0\b \cf4 executemany
\f1\b0 \cf0 ()\
\
Execute a string of multiple SQL statements separated by a ;\

\f0\b \cf4 executescript
\f1\b0 \cf0 ()\
\

\f0\b SQL Lite
\f1\b0 \
\

\f0\b \cf3 import sqlite3
\f1\b0 \cf0 \
\
def Main():\
	try:\
		con = sqlite3.
\f0\b \cf4 connect
\f1\b0 \cf0 ('test.db')\
		cur = con.
\f0\b \cf4 cursor
\f1\b0 \cf0 ()\
		cur = 
\f0\b \cf4 execute
\f1\b0 \cf0 ('CREATE TABLE Pets(id INT, Name TEXT, 					   				Price INT')\
	\
		cur = 
\f0\b \cf4 execute
\f1\b0 \cf0 ("INSERT INTO Pets VALUES=(1,'Cat',400)")\
		cur = 
\f0\b \cf4 execute
\f1\b0 \cf0 ("INSERT INTO Pets VALUES=(2,'Dog',600)")\
		\
		con.
\f0\b \cf4 commit
\f1\b0 \cf0 ()\
		cur = 
\f0\b \cf4 execute
\f1\b0 \cf0 ('SELECT * FROM Pets")\
		data = cur.
\f0\b \cf4 fetchall
\f1\b0 \cf0 ()\
	\
		for row in data:\
			print row\
		\
	except sqlite3.Error, e:\
		if con:\
			con.
\f0\b \cf4 rollback
\f1\b0 \cf0 ()\
	finally:\
		if con:\
			con.
\f0\b \cf4 close
\f1\b0 \cf0 ()\
\

\f0\b Multiple Queries
\f1\b0 \
\
def Main():\
	try:\
		con = sqlite3.
\f0\b \cf4 connect
\f1\b0 \cf0 ('test.db')\
		cur = con.
\f0\b \cf4 cursor
\f1\b0 \cf0 ()\
		cur = 
\f0\b \cf4 executescript
\f1\b0 \cf0 ("""DROP TABLE IF EXISTS Pets;\
			CREATE TABLE Pets(id INT, Name TEXT,Price INT);\
			INSERT INTO Pets VALUES=(1,'Cat',400);\
			INSERT INTO Pets VALUES=(2,'Dog',600);""")\
		\
		
\f0\b \cf5 pets
\f1\b0 \cf0 ((3,'Rabbit',200),\
			(4,'Bird',60),\
			(5,'Goat',500))\
\
		cur.
\f0\b \cf4 executemany
\f1\b0 \cf0 ("INSERT INTO Pets VALUES(?,?,?)", 						
\f0\b \cf5 pets
\f1\b0 \cf0 )\
		con.
\f0\b \cf4 commit
\f1\b0 \cf0 ()\
		cur = 
\f0\b \cf4 execute
\f1\b0 \cf0 ('SELECT * FROM Pets")\
		data = cur.
\f0\b \cf4 fetchall
\f1\b0 \cf0 ()\
	\
		for row in data:\
			print row\
		\
	except sqlite3.Error, e:\
		if con:\
			con.
\f0\b \cf4 rollback
\f1\b0 \cf0 ()\
	finally:\
		if con:\
			con.
\f0\b \cf4 close
\f1\b0 \cf0 ()\
\
\

\f2\b \cf2 \ul \ulc2 PyCrypto
\f1\b0 \cf0 \ulnone \
\

\f0\b Encrypt
\f1\b0 \
\

\f0\b \cf8 import os, random\
from Crypto.cipher import AES\
from Crypto.Hash import SHA256
\f1\b0 \cf0 \
\
def encrypt(key, filename):\
	chunksize = 64*1024\
	outputFile = "(encrypted)" + filename\
	filesize = str(os.path.getsize(filename)).zfill(16)\
	IV = ''\
\
	for i in range(16):\
		IV += chr(random.randint(0,0xFF))\
	\
	encryptor = AES.new(key, AES.MODE_CBC, IV)\
\
	with open(filename, 'rb') as infile:\
		with open(outputFile, 'wb') as outfile:\
			outfile.write(filesize)\
			outfile.write(IV)\
			\
			while True:\
				chunk = infile.read(chunksize)\
				if len(chunk) == 0:\
					break\
				elif len(chunk) % 16 != 0:\
					chunk += ' ' * (16 - (len(chunk)%16))\
 				\
				outfile.write(encryptor.encrypt(chunk))\
\

\f0\b Decrypt
\f1\b0 \
\
def decrypt(key, filename):\
	chunksize = 64*1024\
	outputfile = filename[11:]\
\
	with open(filename, 'rb') as infile:\
		filesize = long(infile.read(16))\
		IV = infile.read(16)\
\
		decryptor = AES.new(key, AES.MODE_CBC, IV)\
	\
		with open(outputFile, 'wb') as outfile\
			while True:\
				chunk = infile.read(chunksize)\
				\
				if len(chunk) == 0:\
					break\
				\
				outfile.write(decryptor.decrypt(chunk))\
			outfile.truncate(filesize)\
\
def getKey(password):\
	hasher = SHA256.new(password)\
	return hasher.digest()\
\
def Main():\
	password = raw_input("Password:")\
	encrypt(getKey(password), filename)\
	decrypt(getKey(password), filename)\
\

\f2\b \cf2 \ul \ulc2 -m
\f1\b0 \cf0 \ulnone  \
\

\f0\b -m
\f1\b0  lets you run modules as scripts\
\

\f0\b Simple Http Server
\f1\b0 \
python 
\f0\b \cf4 -m
\f1\b0 \cf0  SimpleHTTPServer 8000 \
\

\f0\b Open a WebPage
\f1\b0 \
python 
\f0\b \cf4 -m
\f1\b0 \cf0  webbrowser 
\f0\b \cf4 -n
\f1\b0 \cf0  {\field{\*\fldinst{HYPERLINK "http://www.google.co.il"}}{\fldrslt \cf9 \ul \ulc9 http://www.google.co.il}}\
\
it'll indent nicely an JSON input in the standard output\
curl -sL {\field{\*\fldinst{HYPERLINK "http://j.mp/1IuxaLD"}}{\fldrslt \cf9 \ul \ulc9 http://j.mp/1IuxaLD}} | python -m json.tool\
\
\

\f0\b \cf4 filecmp 
\f1\b0 \cf0 - Compare two directories.\
$ python -m filecmp /tmp/a /tmp/b\
\
\cf4 zipfile \cf0 will let you view, extract and create zip files\
\
python -m zipfile -h\
Usage:\
    zipfile.py -l zipfile.zip        # Show listing of a zipfile\
    zipfile.py -t zipfile.zip        # Test if a zipfile is valid\
    zipfile.py -e zipfile.zip target # Extract zipfile into target dir\
    zipfile.py -c zipfile.zip src ... # Create zipfile from sources\
\
python -m calendar\
\

\f2\b \cf2 \ul \ulc2 Using Python Turtle Module
\f1\b0 \cf0 \ulnone \

\f2 The 
\b turtle 
\b0 module is a way of programming vector graphics,\
which is basically just drawing with simple lines, dots, and curves.
\f1 \
\
first we need to import the turtle module:\

\f0\b \cf4 import \cf0 turtle
\f1\b0 \
\

\f0\b Creating a canvas
\f1\b0 \
t = 
\f0\b \cf4 turtle.Pen()
\f1\b0 \cf0 \
\

\f0\b Moving the turtle
\f1\b0 \
t.
\f0\b \cf4 forward
\f1\b0 \cf0 (num_of_pixels)\
t.
\f0\b \cf4 backward
\f1\b0 \cf0 (num_of_pixels)\
t.
\f0\b \cf4 left
\f1\b0 \cf0 (degrees)\
t.
\f0\b \cf4 right
\f1\b0 \cf0 (degrees)\
\

\f0\b Lifting or putting the pen
\f1\b0 \
t.
\f0\b \cf4 up()
\f1\b0 \cf0  -> Lifts the pen from canvas (not drawing)\
t.
\f0\b \cf4 down()
\f1\b0 \cf0  -> puts the pen down to the canvas\
\

\f0\b Erasing the canvas
\f1\b0 \
t.
\f0\b \cf4 reset()\

\f1\b0 \cf0 t.
\f0\b \cf4 clear()
\f1\b0 \cf0 \
\

\f0\b Objects and classes in pictures
\f1\b0 \
avery = turtle.pen()\
kate = turtle.pen()\
\

\f0\b Drawing a Square
\f1\b0 \
for x in range(1,5):\
	t.
\f0\b \cf4 forward
\f1\b0 \cf0 (50)\
	t.
\f0\b \cf4 left
\f1\b0 \cf0 (90)\
\

\f0\b Drawing a Star
\f1\b0 \
for x in range(1, 9):\
	t.
\f0\b \cf4 forward
\f1\b0 \cf0 (100)\
	t.
\f0\b \cf4 left
\f1\b0 \cf0 (225)\
\

\f0\b A spiral star
\f1\b0 \
for x in range(1, 20):\
	t.
\f0\b \cf4 forward
\f1\b0 \cf0 (100)\
	t.
\f0\b \cf4 left
\f1\b0 \cf0 (95)\
\

\f0\b Drawing a Sun
\f1\b0 \
for x in range(1,38):\
	t.
\f0\b \cf4 forward
\f1\b0 \cf0 (100)\
	t.
\f0\b \cf4 left
\f1\b0 \cf0 (175)\
\

\f0\b Coloring Things
\f1\b0 \
t.
\f0\b \cf4 color
\f1\b0 \cf0 (R,G,B)\
t.
\f0\b \cf4 color
\f1\b0 \cf0 (1,0,0) -> use 100% Red\
\
t.
\f0\b \cf4 color
\f1\b0 \cf0 (1,1,0) -> yellow\
t.
\f0\b \cf4 begin_fill
\f1\b0 \cf0 ()\
t.
\f0\b \cf4 circle
\f1\b0 \cf0 (50)\
t.
\f0\b \cf4 end_fill
\f1\b0 \cf0 ()\
\
t.
\f0\b \cf4 color
\f1\b0 \cf0 (0.9, 0.75 ,0) - > gold\
\

\f2\b \cf2 \ul \ulc2 Using Python tkinter graphics
\f1\b0 \cf0 \ulnone \
from Tkinter import *\
\

\f3\i\b BUTTON
\f1\i0\b0 \
tk = 
\f0\b \cf4 Tk
\f1\b0 \cf0 ()\
btn = 
\f0\b \cf4 Button
\f1\b0 \cf0 (tk, text="Click Me", command=(function))\
btn.
\f0\b \cf4 pack
\f1\b0 \cf0 ()\
\

\f3\i\b CANVAS (Like Window)
\f1\i0\b0 \
tk = 
\f0\b \cf4 Tk
\f1\b0 \cf0 ()\
canvas = 
\f0\b \cf4 Canvas
\f1\b0 \cf0 (tk,width=500,height=500)\
canvas.
\f0\b \cf4 pack
\f1\b0 \cf0 ()\
\

\f0\b \cf5 Changing Canvas Proprties:
\f1\b0 \cf0 \
canvas = Canvas(tk, width=500,height=400,\
		     
\f0\b \cf4 bd
\f1\b0 \cf0 =0,
\f0\b \cf4 highlightthickness
\f1\b0 \cf0 =0)\

\f0\b \cf4 bd 
\f1\b0 \cf0 -> no border around the outside of the canvas\
tk.
\f0\b \cf4 title
\f1\b0 \cf0 ("Game") -> changes the title of Canvas\
tk.
\f0\b \cf4 resizable
\f1\b0 \cf0 (0,0) -> Fixed size\
tk.
\f0\b \cf4 wm_attributes
\f1\b0 \cf0 ("-topmost",1) -> Make it top most\
\
canvas.
\f0\b \cf4 winfo_height
\f1\b0 \cf0  -> the canvas height\
canvas.
\f0\b \cf4 winfo_width
\f1\b0 \cf0  -> the canvas width\
\

\f0\b \cf5 making the canvas continue drawing until closed:
\f1\b0 \cf0 \
While 1:\
	tk.
\f0\b \cf4 update_idletasks
\f1\b0 \cf0 ()\
	tk.
\f0\b \cf4 update
\f1\b0 \cf0 ()\
	time.
\f0\b \cf4 sleep
\f1\b0 \cf0 (0.01)\
\

\f0\b \cf5 drawing lines on canvas:
\f1\b0 \cf0 \
canvas.
\f0\b \cf4 create_line
\f1\b0 \cf0 (0, 0, 500, 500)\
\

\f0\b \cf5 drawing boxes:
\f1\b0 \cf0 \
canvas.
\f0\b \cf4 create_rectangle
\f1\b0 \cf0 (10,10,50,50)\
\

\f0\b \cf5 setting the color:
\f1\b0 \cf0 \
canvas.
\f0\b \cf4 create_rectangle
\f1\b0 \cf0 (x1,y1,x2,y2,fill='red')\
Or\
fill='#ffd800'\
\

\f0\b \cf5 color chooser:
\f1\b0 \cf0 \
c = 
\f0\b \cf4 colorchooser.askcolor
\f1\b0 \cf0 ()\
when pressed OK a tupple will be created\
c[1] -> will bring the color in the first place\
\

\f0\b \cf5 drawing arcs:
\f1\b0 \cf0 \
canvas.
\f0\b \cf4 create_arc
\f1\b0 \cf0 (10,10,200,100,extent=180,style=ARC)\
to draw a circle use 359 degrees not 360 which equals to 0\
\

\f0\b \cf5 drawing ploygons:
\f1\b0 \cf0 \

\f3\i\b triangle
\f1\i0\b0 ->\
canvas.
\f0\b \cf4 create_polygon
\f1\b0 \cf0 (10,10,100,10,100,110,
\f0\b fill
\f1\b0 ="",\
				
\f0\b outline
\f1\b0 ="black")\
\

\f0\b \cf5 displaying text:
\f1\b0 \cf0 \
canvas.
\f0\b \cf4 create_text
\f1\b0 \cf0 (150,100,text="Hi Text",fill='red')\
\

\f0\b changing font:
\f1\b0 \
canvas.
\f0\b \cf4 create_text
\f1\b0 \cf0 (10,10,
\f0\b text
\f1\b0 ="New Font",\
			   
\f0\b font
\f1\b0 =('Times',15))\
\

\f0\b \cf5 displaying images:
\f1\b0 \cf0 \
Tkinter only supports GIF images\
If you want JPG etc.. use PIL module.\

\f4 ({\field{\*\fldinst{HYPERLINK "http://www.pythonware.com/products/pil/"}}{\fldrslt \cf9 \ul \ulc9 http://www.pythonware.com/products/pil/}}
\f1 )\
\
my_image=
\f0\b \cf4 PhotoImage
\f1\b0 \cf0 (file='c:\\\\test.gif')\
canvas.
\f0\b \cf4 create_image
\f1\b0 \cf0 (0,0,anchor=NW,image=my_image)\
\

\f0\b \cf5 creating basic animation:
\f1\b0 \cf0 \
to move a triangle ->\
canvas.
\f0\b \cf4 create_polygon
\f1\b0 \cf0 (10,10,10,60,50,35)\
for x in range(0,60):\
	canvas.
\f0\b \cf4 move
\f1\b0 \cf0 (1,5,0)\
	tk.
\f0\b \cf4 update
\f1\b0 \cf0 ()\
	time.sleep(0.05)\
\
canvas.move(ID of the shape,x,y)\
\

\f0\b \cf5 making an object react to something:
\f1\b0 \cf0 \
we are using events\
\
def movetraingle(event):\
	canvas.
\f0\b \cf4 move
\f1\b0 \cf0 (1,5,0)\
\
to bind the event:\
canvas.
\f0\b \cf4 bind_all
\f1\b0 \cf0 ('<KeyPress-Return>',movetraingle)\
\
def movetriangle(event):\
	if event.
\f0\b \cf4 keysym 
\f1\b0 \cf0 == 'Up':\
		canvas.
\f0\b \cf4 move
\f1\b0 \cf0 (1,0,-3)\
	elif event.
\f0\b \cf4 keysym 
\f1\b0 \cf0 == 'Down:\
		canvas.
\f0\b \cf4 move
\f1\b0 \cf0 (1,0,3)\
\
canvas.
\f0\b bind_all
\f1\b0 ('<KeyPress-Up>',movetriangle)\
canvas.
\f0\b bind_all
\f1\b0 ('<KeyPress-Down>',movetriangle)\
\

\f0\b \cf5 more ways to use identifiers:
\f1\b0 \cf0 \
To change shape parameters\
mytriangle=canvas.
\f0\b \cf4 create_polygon
\f1\b0 \cf0 (10,10,10,60,50,35,fill='red')\
canvas.
\f0\b \cf4 itemconfig
\f1\b0 \cf0 (mytriangle,fill='blue')\
\

\f0\b \cf5 get the coordinates of object by identifier:
\f1\b0 \cf0 \
canvas.
\f0\b \cf4 coords
\f1\b0 \cf0 (Object_Id) ->\
[255.0, 29.0, 270.0, 44.0]\
\
\
\
\
\
\
\
\
\
}
{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Calibri;}
{\colortbl;\red255\green255\blue255;\red0\green77\blue187;\red155\green0\blue211;\red75\green172\blue198;
\red0\green0\blue255;\red0\green186\blue251;\red0\green0\blue0;}
\paperw11900\paperh16840\vieww20180\viewh25860\viewkind0
\deftab720
\pard\pardeftab720\sl276\slmult1\partightenfactor0

\f0\b\fs36 \cf0 \ul \ulc0 IOS7 Core\

\i\fs22 \cf2 \ulnone \

\i0\fs28 \cf3 Changing The display contrast of the status bar\

\b0\fs22 \cf0 in a View controller:\
-(
\b \cf4 UIStatusBarStyle
\b0 \cf0 ) preferredStatusBarStyle\
\{\
   
\b \cf3 return 
\b0 \cf0 UIStatusBarStyleLightContent;\
\}\
\
\pard\pardeftab720\sl276\slmult1\partightenfactor0

\b\fs28 \cf3 Creating content subview to avoid status bar
\b0\fs22 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 In ViewController.h\

\b \cf5 @property
\b0 \cf0  (
\b \cf5 strong, nonatomic
\b0 \cf0 ) 
\b \cf6 UIView
\b0 \cf0  *contentSubview;\
\
In ViewController.m\
-(
\b \cf5 void
\b0 \cf0 ) loadView\
\{\
    
\b \cf6 UIView
\b0 \cf0  *
\b view
\b0  = [[
\b \cf6 UIView alloc
\b0 \cf0 ] 
\b \cf6 init
\b0 \cf0 ];\
    
\b view
\b0 .
\b \cf6 backgroundColor
\b0 \cf0  = [
\b \cf6 UIColor greenColor
\b0 \cf0 ];\
\
    
\b \cf5 self
\b0 \cf0 .
\b \cf6 contentSubview
\b0 \cf0  = [[
\b \cf6 UIView alloc
\b0 \cf0 ] 
\b \cf6 init
\b0 \cf0 ];\
    
\b \cf5 self
\b0 \cf0 .
\b \cf6 contentSubview
\b0 \cf0 .
\b \cf6 backgroundColor
\b0 \cf0  = [
\b \cf6 UIColor orangeColor
\b0 \cf0 ];\
    [view 
\b \cf6 addSubview
\b0 \cf0 :
\b \cf5 self
\b0 \cf0 .
\b \cf6 contentSubview
\b0 \cf0 ];\
\
    
\b \cf5 self
\b0 \cf0 .
\b \cf6 view
\b0 \cf0  = 
\b view
\b0 ;\
\}
\b \
\pard\pardeftab720\sl276\slmult1\partightenfactor0

\b0 \cf0 \

\b Use the new topLayoutGuide property
\b0 \

\b \cf5 topLayoutGuide
\b0 \cf0  is a new UIViewController property that allows you to get the size\
of the status bar area to account for it in your view layout.\
\
if 
\b no
\b0  status bar:\

\b \cf5 self
\b0 \cf0 .
\b \cf6 topLayoutGuide.length
\b0 \cf0  == 0\
\
if 
\b there is
\b0  a status bar:\

\b \cf5 self
\b0 \cf0 .
\b \cf6 topLayoutGuide.length
\b0 \cf0  == 20\
\

\b Moving contentSubview below the status bar area
\b0 \
\pard\pardeftab720\partightenfactor0
\cf0 In ViewController.m\
\pard\pardeftab720\sl276\slmult1\partightenfactor0
\cf0 - (
\b \cf5 void
\b0 \cf0 ) viewWillLayoutSubviews\
\{\
     [
\b \cf5 super
\b0 \cf0  
\b \cf6 viewWillLayoutSubviews
\b0 \cf0 ];\
\
     
\b \cf5 self
\b0 \cf0 .
\b \cf6 contentSubview.frame
\b0 \cf0  = 
\b \cf6 CGRectMake
\b0 \cf0 (0,\
					          
\b \cf5 self
\b0 \cf0 .
\b \cf6 topLayoutGuide.length
\b0 \cf0 , \
					          
\b \cf6 CGRectGetWidth
\b0 \cf0 (
\b \cf5 self
\b0 \cf0 .
\b \cf6 view.frame
\b0 \cf0 ),\
                                                                                  
\b \cf6 CGRectGetHeight
\b0 \cf0 (
\b \cf5 self
\b0 \cf0 .
\b \cf6 view.frame
\b0 \cf0 )\
					          - 
\b \cf5 self
\b0 \cf0 .
\b \cf6 topLayoutGuide.length \
					          - \cf5 self\cf6 .bottomLayoutGuide.length
\b0 \cf0 );\
\
\}\
It is preferred to set them here instead of 
\b viewDidLoad
\b0  \
because the topLayoutGuide isn\'92t set until right before 
\b viewWillLayoutSubviews
\b0  is called\
\

\b Layout the rest of the subviews
\b0 \
The rest of the labels can now be added as subviews of contentSubview\
without fear of interfering with the status bar area.\
\
Use the contentSubview frame as a top reference for subviews instead of topLayoutGuide.\
\
In ViewController.m\
-(
\b \cf5 void
\b0 \cf0 ) loadView\
\{\
	
\b \cf5 self
\b0 \cf0 .wonLabel = [[
\b \cf6 UILabel alloc\cf7 ]\cf6  init
\b0 \cf0 ];\
               [
\b \cf5 self
\b0 \cf0 .
\b \cf6 contentSubview
\b0 \cf0  
\b \cf6 addSubview
\b0 \cf0 :
\b \cf5 self
\b0 \cf0 .wonLabel\
\}\
\
\pard\pardeftab720\sl276\slmult1\partightenfactor0

\b\fs28 \cf3 Navigation And Tab Bars
\b0\fs22 \cf0 \
\pard\pardeftab720\sl276\slmult1\partightenfactor0
\cf0 Nav bar takes up additional space\
The status bar and nav bar are attached so now :\
\pard\pardeftab720\sl276\slmult1\partightenfactor0

\b \cf5 self
\b0 \cf0 .
\b \cf6 topLayoutGuide.length
\b0 \cf0  == 64\
\pard\pardeftab720\sl276\slmult1\partightenfactor0
\cf0 \
If your main view or content subview is a scroll view, there\'92s a few things to understand :\
A \'93padding\'94 is added for you when wither self.view or the immediate content subview of self.view is a UIScrollView\
The padding amount is equal to:\
\pard\pardeftab720\sl276\slmult1\partightenfactor0

\b \cf5 self
\b0 \cf0 .
\b \cf6 topLayoutGuide.length
\b0 \cf0 \
\pard\pardeftab720\sl276\slmult1\partightenfactor0
\cf0 \

\b This property turns on the padding  ( will take care of the tab bar also ):
\b0 \
-(
\b \cf5 void
\b0 \cf0 ) loadView\
\{\
	
\b \cf5 self
\b0 \cf0 .
\b \cf6 automaticallyAdjustsScrollViewInsets
\b0 \cf0  = 
\b \cf5 YES
\b0 \cf0 ;\
\}\
\
For Tab Bars we have this property :\

\b \cf5 self
\b0 \cf0 .
\b \cf6 bottomLayoutGuide
\b0 \cf0 .
\b \cf6 length
\b0 \cf0  == 49\
\
\
\
\
\
\
\
\
}